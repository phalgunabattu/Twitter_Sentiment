{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"2_Simple_NN.ipnyb","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1qsgy6H_ouWp8rGfE54G0ONfxcv1m8h-S","authorship_tag":"ABX9TyNhKbfnRwpVKWMdC+5yvPyY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"5R4mLaolzHm_"},"source":["# Imports"]},{"cell_type":"code","metadata":{"id":"qMiy8hf5y6Oh","executionInfo":{"status":"ok","timestamp":1602769181210,"user_tz":-180,"elapsed":3001,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import confusion_matrix, classification_report\n","\n","import matplotlib.pyplot as plt\n","\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from keras.utils import np_utils\n","from keras.models import Sequential\n","from keras import layers\n","from keras.wrappers.scikit_learn import KerasClassifier"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wsV9LpsB1kDd"},"source":["# Data"]},{"cell_type":"markdown","metadata":{"id":"KTtAL3_U6j0S"},"source":["For this example you need to download twitter data from Kaggle: https://www.kaggle.com/kazanova/sentiment140"]},{"cell_type":"markdown","metadata":{"id":"wjfc1e9d80OA"},"source":["Context \\\\\n","\\\n","This is the sentiment140 dataset. It contains 1,600,000 tweets extracted using the twitter api . The tweets have been annotated (0 = negative, 4 = positive) and they can be used to detect sentiment. \\\\\n","\\\n","Content \\\\\n","\\\n","It contains the following 6 fields:\n","* target: the polarity of the tweet (0 = negative, 4 = positive)\n","\n","* ids: The id of the tweet ( 2087)\n","\n","* date: the date of the tweet (Sat May 16 23:58:44 UTC 2009)\n","\n","* flag: The query (lyx). If there is no query, then this value is NO_QUERY.\n","\n","* user: the user that tweeted (robotickilldozr)\n","\n","* text: the text of the tweet (Lyx is cool)\n","\n","Acknowledgements \\\\\n","The official link regarding the dataset with resources about how it was generated is [here](http://%20http//help.sentiment140.com/for-students/) \\\\\n","The official paper detailing the approach is [here](http://bhttp//cs.stanford.edu/people/alecmgo/papers/TwitterDistantSupervision09.pdf)\n","\n","Citation: Go, A., Bhayani, R. and Huang, L., 2009. Twitter sentiment classification using distant supervision. CS224N Project Report, Stanford, 1(2009), p.12."]},{"cell_type":"code","metadata":{"id":"FzXp3Gua1lxV","executionInfo":{"status":"ok","timestamp":1602769187539,"user_tz":-180,"elapsed":9320,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["df = pd.read_csv('/content/drive/My Drive/YouTube/botters_2020-10/twitter_sentiment_course/twitter_data/training.1600000.processed.noemoticon.csv',\n","                 encoding='ISO-8859-1', \n","                 names=[\n","                        'target',\n","                        'id',\n","                        'date',\n","                        'flag',\n","                        'user',\n","                        'text'\n","                        ])"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"XhsfgM9o12-L","executionInfo":{"status":"ok","timestamp":1602769187541,"user_tz":-180,"elapsed":9309,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"5e8ac955-a506-4842-e2d2-de1b3c5a0566","colab":{"base_uri":"https://localhost:8080/","height":203}},"source":["df.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>id</th>\n","      <th>date</th>\n","      <th>flag</th>\n","      <th>user</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>1467810369</td>\n","      <td>Mon Apr 06 22:19:45 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>_TheSpecialOne_</td>\n","      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>1467810672</td>\n","      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>scotthamilton</td>\n","      <td>is upset that he can't update his Facebook by ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1467810917</td>\n","      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>mattycus</td>\n","      <td>@Kenichan I dived many times for the ball. Man...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>1467811184</td>\n","      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>ElleCTF</td>\n","      <td>my whole body feels itchy and like its on fire</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>1467811193</td>\n","      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>Karoli</td>\n","      <td>@nationwideclass no, it's not behaving at all....</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   target  ...                                               text\n","0       0  ...  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n","1       0  ...  is upset that he can't update his Facebook by ...\n","2       0  ...  @Kenichan I dived many times for the ball. Man...\n","3       0  ...    my whole body feels itchy and like its on fire \n","4       0  ...  @nationwideclass no, it's not behaving at all....\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"gnHNDF2H8qo5"},"source":["We have two classes in the dataset"]},{"cell_type":"code","metadata":{"id":"GrL29pcJ6IWE","executionInfo":{"status":"ok","timestamp":1602769187542,"user_tz":-180,"elapsed":9299,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"a69afa13-0769-4ead-e98a-4489ef51063c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["df.target.unique()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 4])"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"ZMQPnCUZdLw_"},"source":["Let's check how equally distributed those classes are."]},{"cell_type":"code","metadata":{"id":"xqUoAbO9awuD","executionInfo":{"status":"ok","timestamp":1602769188569,"user_tz":-180,"elapsed":10313,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"f8b07909-a705-45bd-fb00-692322b27ba6","colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["classes = df.target.unique()\n","counts = []\n","\n","for i in classes:\n","  count = len(df[df.target==i])\n","  counts.append(count)\n","\n","plt.bar(['negative', 'positive'], counts)\n","plt.show()"],"execution_count":5,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"_Z8YvAWgdQsK"},"source":["Even class distribution helps us a lot in text classifiction. Imagine a situation where 95% of data is in one class and the rest 5% is split among other 5 classes. If we wouldn't do anything about it model would just learn to guess the 95% class all the time and would be correct 95% of the time on the data we would use."]},{"cell_type":"markdown","metadata":{"id":"_E8moCv-mbSe"},"source":["To start modelling we still need to do a couple of things:\n","\n","1.   Split data into train and test datasets\n","2.   Tokenize it\n","3.   Pad the text\n","4.   Encode the labels\n","\n"]},{"cell_type":"markdown","metadata":{"id":"r7t3WHSIoZiS"},"source":["## Train/test split"]},{"cell_type":"markdown","metadata":{"id":"x9mheNP29Yjt"},"source":["We don't really need all 1.6 Million tweets for training so we can take a sample of 10% and then split taht into 80% for training and 20% for testing."]},{"cell_type":"code","metadata":{"id":"_ppqSW1N7mIt","executionInfo":{"status":"ok","timestamp":1602769188570,"user_tz":-180,"elapsed":10312,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["sample_size = int(len(df)*0.1)\n","sampleDf = df.sample(sample_size, random_state=23)\n","x = sampleDf.text.values\n","y = sampleDf.target.values\n","x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=32)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5wopVEhDOY1F"},"source":["## Tokenization\n","What we need to do now is to tokenize text (essentialy turning words into tokens). The difference from vectorization that we used in Linear Regression notebook is that we do not count each token occurence in the text. Instead we just turn words into tokens and that's about it. Comparing this to Logistic Regression (LR) example you'll see that in this method we keep the order of the words intact, while, in the LR example we loose that information."]},{"cell_type":"code","metadata":{"id":"A1QGfFgQ-Rpy","executionInfo":{"status":"ok","timestamp":1602769193041,"user_tz":-180,"elapsed":14781,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["tokenizer = Tokenizer()\n","tokenizer.fit_on_texts(x_train)\n","\n","X_train = tokenizer.texts_to_sequences(x_train)\n","X_test = tokenizer.texts_to_sequences(x_test)\n","\n","vocab_size = len(tokenizer.word_index) + 1  # Adding 1 because of reserved 0 index"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LtJV4JBUOsyc"},"source":["Our tokenized dataset will essentially consist of index of each word that is used in training dataset. We can check how it looks by simply printing the first tweet both as it was and after tokenization."]},{"cell_type":"code","metadata":{"id":"iUlYC1mkRuMt","executionInfo":{"status":"ok","timestamp":1602769193042,"user_tz":-180,"elapsed":14770,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"4c2eee7d-cb8f-474a-f257-1ccabaf7fbc3","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["print(x_train[0])\n","print(X_train[0])"],"execution_count":8,"outputs":[{"output_type":"stream","text":["@teefy1983 aww my poor mexican!!! He no feel good at all \n","[33672, 361, 5, 351, 3268, 113, 37, 110, 28, 23, 31]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1_4Ocpt1ohGP"},"source":["## Padding\n","Before modelling we want to make sure our inputs are the same size, since we are using neural network with a fixed input size. \\\\\n","First we figure out the max len."]},{"cell_type":"code","metadata":{"id":"LyDETieLoucQ","executionInfo":{"status":"ok","timestamp":1602769193043,"user_tz":-180,"elapsed":14762,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"cbdfdf81-b89f-449e-d624-540aa9aceed0","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["lens_train = [len(i) for i in X_train]\n","lens_test = [len(i) for i in X_test]\n","lens = lens_train + lens_test\n","\n","maxlen = np.max(lens)\n","\n","print('Max len:', maxlen)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Max len: 118\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"DLwovzmrpFQB"},"source":["Then we pad our inputs to fit that size."]},{"cell_type":"code","metadata":{"id":"2n1-CNwTpNF9","executionInfo":{"status":"ok","timestamp":1602769193849,"user_tz":-180,"elapsed":15564,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["X_train = pad_sequences(X_train, padding='post', maxlen=maxlen)\n","X_test = pad_sequences(X_test, padding='post', maxlen=maxlen)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dXkNGdGXpebb"},"source":["## Label Encoding"]},{"cell_type":"markdown","metadata":{"id":"Nm167nTwprAv"},"source":["We could get away with other approach but you might want to use this for more than binary classification."]},{"cell_type":"code","metadata":{"id":"NdvqxTMYpnqX","executionInfo":{"status":"ok","timestamp":1602769193851,"user_tz":-180,"elapsed":15564,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["encoder = LabelEncoder()\n","encoder.fit(y)\n","encoded_Y_test = encoder.transform(y_test)\n","encoded_Y_train = encoder.transform(y_train)\n","\n","# convert integers to dummy variables (i.e. one hot encoded)\n","dummy_y_test = np_utils.to_categorical(encoded_Y_test)\n","dummy_y_train = np_utils.to_categorical(encoded_Y_train)"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jiGcqcLLPnCq"},"source":["# Modelling\n","The model that we use here is a simple Neural Network. I'll add some comments to explain what each line does."]},{"cell_type":"code","metadata":{"id":"SRc8JH-S-fBl","executionInfo":{"status":"ok","timestamp":1602769199070,"user_tz":-180,"elapsed":20774,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"350ba370-5095-4870-e2a0-dee8647d2b82","colab":{"base_uri":"https://localhost:8080/","height":463}},"source":["embedding_dim = 100  # vector representation of words/neuron amount after the input https://datascience.stackexchange.com/questions/53995/what-does-embedding-mean-in-machine-learning#:~:text=In%20the%20context%20of%20machine,with%20other%20models%20as%20well.\n","\n","model = Sequential()  # initiates the model\n","model.add(layers.Embedding(input_dim=vocab_size,  # adds the first [input] layer which will be our tokenized tweets\n","                          output_dim=embedding_dim,  # the embedding of that tweet, essentially inputs output\n","                          input_length=maxlen))  # size of the input layer determined by maxlen calculated before\n","model.add(layers.Dropout(0.2))  # dorpouts are added to help with overtraining, essentially \"turns off\" said amount of neurons before giving information to the next layer\n","model.add(layers.GlobalMaxPool1D())  # https://computersciencewiki.org/index.php/Max-pooling_/_Pooling\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(50, activation='relu'))  # additional hidden layer\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(50, activation='relu'))\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(2, activation='softmax'))  # prediction layer, 2 is the number of classes we have\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","model.summary()"],"execution_count":12,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 118, 100)          11789900  \n","_________________________________________________________________\n","dropout (Dropout)            (None, 118, 100)          0         \n","_________________________________________________________________\n","global_max_pooling1d (Global (None, 100)               0         \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 50)                5050      \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 50)                2550      \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 2)                 102       \n","=================================================================\n","Total params: 11,797,602\n","Trainable params: 11,797,602\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9OdXHctIZmeI"},"source":["So we have our model. All we need now is to train it."]},{"cell_type":"code","metadata":{"id":"rhJt6HHXsEL9","executionInfo":{"status":"ok","timestamp":1602769596187,"user_tz":-180,"elapsed":364982,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"d4251e4f-70ba-4977-c4d9-d2a580543873","colab":{"base_uri":"https://localhost:8080/","height":174}},"source":["history = model.fit(X_train, dummy_y_train,\n","                    epochs=3,  # times model will run through the data\n","                    verbose=True,\n","                    validation_data=(X_test, dummy_y_test),\n","                    batch_size=128)  # data is set to batches we are sent to the model to predict, imagine each batc as a step in which model tries to predict the class and then checks the right answer and corrects it's weights with backpropogation\n","loss, accuracy = model.evaluate(X_train, dummy_y_train, verbose=False)\n","print(\"Training Accuracy: {:.4f}\".format(accuracy))\n","loss, accuracy = model.evaluate(X_test, dummy_y_test, verbose=False)\n","print(\"Testing Accuracy:  {:.4f}\".format(accuracy))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Epoch 1/3\n","1000/1000 [==============================] - 118s 118ms/step - loss: 0.4802 - accuracy: 0.7713 - val_loss: 0.4452 - val_accuracy: 0.7908\n","Epoch 2/3\n","1000/1000 [==============================] - 118s 118ms/step - loss: 0.3878 - accuracy: 0.8239 - val_loss: 0.4497 - val_accuracy: 0.7910\n","Epoch 3/3\n","1000/1000 [==============================] - 118s 118ms/step - loss: 0.3182 - accuracy: 0.8601 - val_loss: 0.4792 - val_accuracy: 0.7850\n","Training Accuracy: 0.9194\n","Testing Accuracy:  0.7850\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"cOlqqrekXqjU"},"source":["Let's have a nice plot of our training process."]},{"cell_type":"code","metadata":{"id":"yGzZxjWN7aoc","executionInfo":{"status":"ok","timestamp":1602769597136,"user_tz":-180,"elapsed":925,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":["plt.style.use('ggplot')\n","\n","def plot_history(history):\n","    acc = history.history['accuracy']\n","    val_acc = history.history['val_accuracy']\n","    loss = history.history['loss']\n","    val_loss = history.history['val_loss']\n","    x = range(1, len(acc) + 1)\n","\n","    plt.figure(figsize=(12, 5))\n","    plt.subplot(1, 2, 1)\n","    plt.plot(x, acc, 'b', label='Training acc')\n","    plt.plot(x, val_acc, 'r', label='Validation acc')\n","    plt.title('Training and validation accuracy')\n","    plt.legend()\n","    plt.subplot(1, 2, 2)\n","    plt.plot(x, loss, 'b', label='Training loss')\n","    plt.plot(x, val_loss, 'r', label='Validation loss')\n","    plt.title('Training and validation loss')\n","    plt.legend()"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z6I3hCdk7ciN","executionInfo":{"status":"ok","timestamp":1602769597762,"user_tz":-180,"elapsed":1538,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"fa1b1fda-57ab-4559-e279-f9bb6568a800","colab":{"base_uri":"https://localhost:8080/","height":337}},"source":["plot_history(history)"],"execution_count":16,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 864x360 with 2 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"h9Yy3PSlXwKI"},"source":["So there's a couple of interesting things we can see here. Ussually you would see train and validation accuracy both increase over time. Essentially the point where training crosses validation you would want to stop training as it means that model is starting to remember exact things instead of learning patterns, which here is at 2nd epoch. Another thing to take into account is that validation accuracy decreases quite singnificantly over time, instead of growing. Why? Well we have quite a lot of data, so it might very well be that it's enough to have 2 epochs to fully train it before changing learning rate. Essentially, what this shows is that model is rapidly overtraining. If we would remove the dropout layers in the model see ```model.add(layers.Dropout(0.2))``` under [Modeling](#Modelling).\n","\n","**Essentially model is prone to overtrain**\n"]},{"cell_type":"markdown","metadata":{"id":"61h6y03n-6n5"},"source":["#Confussion matrix\n","Before jumping into other models it's always good to check how our model performs in different classes. For that we can use [confussion matrix](https://en.wikipedia.org/wiki/Confusion_matrix).\n","\n","It essentially shows how many times model predicted which class and how many of those times the class it slected was the right one. Here columns are true values and lines are predicted values."]},{"cell_type":"markdown","metadata":{"id":"1IUjrLPUPWEZ"},"source":["So here we need to do it a bit differently from the way we did it in the Logistic Regression notebook. We have encoded our classses using encoder. Here are those classes."]},{"cell_type":"code","metadata":{"id":"N_7cPm0IPWVG","executionInfo":{"status":"ok","timestamp":1602769598130,"user_tz":-180,"elapsed":1895,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"1c22d40a-8c09-4915-ea02-ca9a5d660183","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["encoder.classes_"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 4])"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"YjRW_WnTaMFq"},"source":["And our predictions are stored as arrays with probabilities fir each class."]},{"cell_type":"code","metadata":{"id":"MN2AB5ntaUeX","executionInfo":{"status":"ok","timestamp":1602769599163,"user_tz":-180,"elapsed":2919,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"6ce2a575-c8e0-463a-b6f7-48fc5351c3b7","colab":{"base_uri":"https://localhost:8080/","height":137}},"source":["y_pred = model.predict(X_test)\n","y_pred"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[9.9973863e-01, 2.6138188e-04],\n","       [3.5664213e-03, 9.9643362e-01],\n","       [6.6429543e-01, 3.3570457e-01],\n","       ...,\n","       [6.8795025e-01, 3.1204978e-01],\n","       [1.8648592e-01, 8.1351405e-01],\n","       [1.0236888e-01, 8.9763111e-01]], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"dXjvX2umaYIc"},"source":["Here you can see that we have array of arrays of 2 probabilities for each class. So we need to turn those into classes."]},{"cell_type":"code","metadata":{"id":"y8bi8AFT-qlU","executionInfo":{"status":"ok","timestamp":1602769599164,"user_tz":-180,"elapsed":2912,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"53189057-37fc-4192-def2-19d0eef81e9d","colab":{"base_uri":"https://localhost:8080/","height":110}},"source":["y_predDecoded = [encoder.classes_[np.argmax(i)] for i in y_pred]  # here we get the max probability from those arrays and then based on that select which class is it.\n","cm = confusion_matrix(y_test, y_predDecoded, labels=df.target.unique())  # same confusion matrix code as in Logistic Regression\n","df_cm = pd.DataFrame(cm, index=df.target.unique(), columns=df.target.unique())\n","df_cm"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>12825</td>\n","      <td>3187</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3694</td>\n","      <td>12294</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       0      4\n","0  12825   3187\n","4   3694  12294"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"6Z25Nn0yaOcu"},"source":["For a better understanding you could use percentage expression."]},{"cell_type":"code","metadata":{"id":"kzAdUYAW_F3X","executionInfo":{"status":"ok","timestamp":1602769599165,"user_tz":-180,"elapsed":2906,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"7eba20d7-8f2f-460f-ed71-569b6f5d2703","colab":{"base_uri":"https://localhost:8080/","height":110}},"source":["df_cm_percentage = df_cm.copy()\n","for i in df_cm_percentage:\n","  df_cm_percentage[i]/=df_cm_percentage[i].sum()\n","\n","df_cm_percentage"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.776379</td>\n","      <td>0.205865</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.223621</td>\n","      <td>0.794135</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          0         4\n","0  0.776379  0.205865\n","4  0.223621  0.794135"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"OtcJlPxTa3i7"},"source":["As you can see the results are similar to the Logistic Regression."]},{"cell_type":"markdown","metadata":{"id":"0F3Ay2gNam_x"},"source":["Good, so in the end model learnt to classify both classes about the same. Even though we are using a simple and really overtrained by epoch 10 Neural Network as another base measure to check if the problem is solvable and what results we might expect some insights can be derived here (some the same as LR):\n","\n","1.   Classes are evenly distributed, thus we won't overtrain on one class compared to the other and here we overtrain equally on both :D\n","2.   Neural Network before overtraining and with no learning rate adjustments achieved 80% accuracy, meaning we should be able to get a slightly better result adjusting learning rate and a much better result using language models such as BERT\n","3.   Both classes are predicted equally well\n","\n"]},{"cell_type":"markdown","metadata":{"id":"aQOP0Dx-BCSV"},"source":["# Test"]},{"cell_type":"markdown","metadata":{"id":"iievH-yxBKFb"},"source":["Now we need to check if it actually works. Let's just copy a comment in one of Trump's [tweets](https://twitter.com/realDonaldTrump/status/1315835556081868801). \n","\n","The comment is: \n","PATRIOTIC AMERICANS STAND PROUDLY WITH PRESIDENT TRUMP!!"]},{"cell_type":"code","metadata":{"id":"X2T115aw65gw","executionInfo":{"status":"ok","timestamp":1602772084512,"user_tz":-180,"elapsed":638,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"c7ec7889-1e63-4256-bfe9-645e6ffabde3","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["tweet = 'People are fleeing California. Taxes too high, Crime too high, Brownouts too many, Lockdowns too severe. VOTE FOR TRUMP, WHAT THE HELL DO YOU HAVE TO LOSE!!!'\n","vectTweet = tokenizer.texts_to_sequences(np.array([tweet]))  # vectorizes the tweet using our vectorizer\n","vectTweet = pad_sequences(vectTweet, padding='post', maxlen=maxlen)  # adds padding\n","\n","prediction = model.predict(vectTweet)  # predicts class of the tweet\n","print('Tweet is', 'positive' if encoder.classes_[np.argmax(prediction)]==4 else 'negative')"],"execution_count":26,"outputs":[{"output_type":"stream","text":["Tweet is negative\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fWjPG6n7CPjC"},"source":["Good, so our model is right here. Let's just make sure our model works okay with very specific sentiments."]},{"cell_type":"code","metadata":{"id":"zsKXV4noBvp-","executionInfo":{"status":"ok","timestamp":1602769599401,"user_tz":-180,"elapsed":3120,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}},"outputId":"ea864c0d-1320-47d6-95ab-a1f22c05b054","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["tweetList = ['Best tweet ever!', 'Mondays are the worst...']\n","vectTweet = tokenizer.texts_to_sequences(np.array(tweetList))  # vectorizes the tweet using our vectorizer\n","vectTweet = pad_sequences(vectTweet, padding='post', maxlen=maxlen)  # adds padding\n","\n","prediction = model.predict(vectTweet)  # predicts class of the tweet\n","for enum, i in enumerate(tweetList):\n","  print(i, '| This tweet is', 'positive' if encoder.classes_[np.argmax(prediction[enum])]==4 else 'negative')"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Best tweet ever! | This tweet is positive\n","Mondays are the worst... | This tweet is negative\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C6PYQxT2C5Ph","executionInfo":{"status":"ok","timestamp":1602769599403,"user_tz":-180,"elapsed":3113,"user":{"displayName":"Adam Ling","photoUrl":"","userId":"04744848912553865948"}}},"source":[""],"execution_count":22,"outputs":[]}]}